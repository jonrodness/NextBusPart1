package ca.ubc.cpsc210.nextbus.model;


/**
 * Wait time estimate at a particular stop for a particular bus serving a route
 */
public class BusWaitTime implements Comparable<BusWaitTime> {
	private BusRoute route;
	private int waitTime;
	private boolean isCancelled;
	
	public BusWaitTime(BusRoute route, int estimate, boolean cancelledStatus) {
		this.route = route;
		this.waitTime = estimate;
		this.isCancelled = cancelledStatus;
	}
	
	public BusRoute getRoute() {
		return route;
	}
	
	public int getEstimate() {
		return waitTime;
	}
	
	public boolean isCancelled() {
		return isCancelled;
	}
	
	@Override
	public java.lang.String toString() {
		if (this.isCancelled()) {
			if (waitTime < 2)
				return route.toString() + ": NOW - cancelled";
			else
				return route.toString() + ": " + Integer.toString(waitTime) + " mins - cancelled";
		}
		else {
			if (waitTime < 2)
				return route.toString() + ": NOW";
			else
				return route.toString() + ": " + Integer.toString(waitTime) + " mins";
		}
	}
	
	
	/**
	 * Compare this wait time to another.  Buses with the same wait times and cancelled status 
	 * are ordered by route.  If wait times are the same but cancelled status is different,
	 * cancelled services are ordered before those that are not cancelled.  Otherwise,  
	 * ordered by increasing wait time.
	 */
    @Override
    public int compareTo(BusWaitTime other) {
        if(waitTime == other.waitTime && isCancelled == other.isCancelled)
            return this.route.compareTo(other.route);
        else if (waitTime == other.waitTime)
        	return (isCancelled ? -1 : 1);
        else
            return waitTime - other.waitTime;
    }

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (isCancelled ? 1231 : 1237);
		result = prime * result + ((route == null) ? 0 : route.hashCode());
		result = prime * result + waitTime;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BusWaitTime other = (BusWaitTime) obj;
		if (isCancelled != other.isCancelled)
			return false;
		if (route == null) {
			if (other.route != null)
				return false;
		} else if (!route.equals(other.route))
			return false;
		if (waitTime != other.waitTime)
			return false;
		return true;
	}
}
